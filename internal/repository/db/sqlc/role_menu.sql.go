// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: role_menu.sql

package db

import (
	"context"
)

const countRoleMenuByRole = `-- name: CountRoleMenuByRole :one
SELECT COUNT(*) FROM role_menus
WHERE role = ANY($1::bigint[])
`

func (q *Queries) CountRoleMenuByRole(ctx context.Context, dollar_1 []int64) (int64, error) {
	row := q.db.QueryRow(ctx, countRoleMenuByRole, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteRoleMenu = `-- name: DeleteRoleMenu :exec
DELETE FROM role_menus
WHERE id = ANY($1::bigserial[])
`

func (q *Queries) DeleteRoleMenu(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, deleteRoleMenu, dollar_1)
	return err
}

const listRoleMenuByRole = `-- name: ListRoleMenuByRole :many
SELECT id, role, menu, type, created_at FROM role_menus
WHERE role = $1
`

func (q *Queries) ListRoleMenuByRole(ctx context.Context, role int64) ([]*RoleMenu, error) {
	rows, err := q.db.Query(ctx, listRoleMenuByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*RoleMenu{}
	for rows.Next() {
		var i RoleMenu
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Menu,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleMenuForButton = `-- name: ListRoleMenuForButton :many
SELECT menu FROM role_menus
WHERE role = $1 and type = 2
`

func (q *Queries) ListRoleMenuForButton(ctx context.Context, role int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listRoleMenuForButton, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var menu int64
		if err := rows.Scan(&menu); err != nil {
			return nil, err
		}
		items = append(items, menu)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleMenuForMenu = `-- name: ListRoleMenuForMenu :many
SELECT menu FROM role_menus
WHERE role = $1 and menu <> ANY($2::bigint[])
`

type ListRoleMenuForMenuParams struct {
	Role         int64   `json:"role"`
	Excludemenus []int64 `json:"excludemenus"`
}

func (q *Queries) ListRoleMenuForMenu(ctx context.Context, arg ListRoleMenuForMenuParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listRoleMenuForMenu, arg.Role, arg.Excludemenus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var menu int64
		if err := rows.Scan(&menu); err != nil {
			return nil, err
		}
		items = append(items, menu)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
