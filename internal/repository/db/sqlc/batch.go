// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: batch.go
package db

import (
	"context"

	"github.com/jackc/pgx/v4"
)

const createMenuApi = `-- name: CreateMenuApi :batchexec
INSERT INTO menu_apis (
    menu,
    api
) VALUES (
    $1, $2
)
`

type CreateMenuApiBatchResults struct {
	br  pgx.BatchResults
	ind int
}

type CreateMenuApiParams struct {
	Menu int64 `json:"menu"`
	Api  int64 `json:"api"`
}

func (q *Queries) CreateMenuApi(ctx context.Context, arg []CreateMenuApiParams) *CreateMenuApiBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Menu,
			a.Api,
		}
		batch.Queue(createMenuApi, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateMenuApiBatchResults{br, 0}
}

func (b *CreateMenuApiBatchResults) Exec(f func(int, error)) {
	for {
		_, err := b.br.Exec()
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, err)
		}
		b.ind++
	}
}

func (b *CreateMenuApiBatchResults) Close() error {
	return b.br.Close()
}
