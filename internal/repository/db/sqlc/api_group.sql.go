// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: api_group.sql

package db

import (
	"context"
)

const createApiGroup = `-- name: CreateApiGroup :exec
INSERT INTO api_groups (
    name,remark
) VALUES (
    $1, $2
)
`

type CreateApiGroupParams struct {
	Name   string  `json:"name"`
	Remark *string `json:"remark"`
}

// CreateApiGroup 创建 api组
func (q *Queries) CreateApiGroup(ctx context.Context, arg CreateApiGroupParams) error {
	_, err := q.db.Exec(ctx, createApiGroup, arg.Name, arg.Remark)
	return err
}

const listApiGroup = `-- name: ListApiGroup :many
SELECT id, name, remark, created_at FROM api_groups
WHERE CASE WHEN $1::text = '' then 1=1 else name like concat('%',$1::text,'%') or remark like concat('%',$1::text,'%') end
`

func (q *Queries) ListApiGroup(ctx context.Context, key string) ([]*ApiGroup, error) {
	rows, err := q.db.Query(ctx, listApiGroup, key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ApiGroup{}
	for rows.Next() {
		var i ApiGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Remark,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
